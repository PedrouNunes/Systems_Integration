"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SSESubscription = exports.LongPollingSubscription = void 0;
const eventsource_1 = __importDefault(require("eventsource"));
const core_1 = require("@node-wot/core");
const stream_1 = require("stream");
const { debug } = (0, core_1.createLoggers)("binding-http", "subscription-protocols");
class LongPollingSubscription {
    constructor(form, client) {
        this.form = form;
        this.client = client;
        this.closed = false;
        this.abortController = new AbortController();
    }
    open(next, error, complete) {
        return new Promise((resolve, reject) => {
            const polling = async (handshake) => {
                try {
                    if (handshake) {
                        const headRequest = await this.client["generateFetchRequest"](this.form, "HEAD", {
                            timeout: 1000,
                            signal: this.abortController.signal,
                        });
                        const result = await this.client["doFetch"](headRequest);
                        if (result.ok)
                            resolve();
                    }
                    const request = await this.client["generateFetchRequest"](this.form, "GET", {
                        timeout: 60 * 60 * 1000,
                        signal: this.abortController.signal,
                    });
                    debug(`HttpClient (subscribeResource) sending ${request.method} to ${request.url}`);
                    const result = await this.client["doFetch"](request);
                    this.client["checkFetchResponse"](result);
                    debug(`HttpClient received ${result.status} from ${request.url}`);
                    debug(`HttpClient received headers: ${JSON.stringify(result.headers.raw())}`);
                    debug(`HttpClient received Content-Type: ${result.headers.get("content-type")}`);
                    if (!this.closed) {
                        const body = core_1.ProtocolHelpers.toNodeStream(result.body);
                        next(new core_1.Content(result.headers.get("content-type") ?? core_1.ContentSerdes.DEFAULT, body));
                        polling(false);
                    }
                    complete && complete();
                }
                catch (e) {
                    const err = e instanceof Error ? e : new Error(JSON.stringify(e));
                    error && error(err);
                    complete && complete();
                    reject(e);
                }
            };
            polling(true);
        });
    }
    close() {
        this.abortController.abort();
        this.closed = true;
    }
}
exports.LongPollingSubscription = LongPollingSubscription;
class SSESubscription {
    constructor(form) {
        this.form = form;
        this.closed = false;
    }
    open(next, error, complete) {
        return new Promise((resolve, reject) => {
            this.eventSource = new eventsource_1.default(this.form.href);
            this.eventSource.onopen = (event) => {
                debug(`HttpClient (subscribeResource) Server-Sent Event connection is opened to ${this.form.href}`);
                resolve();
            };
            this.eventSource.onmessage = (event) => {
                debug(`HttpClient received ${JSON.stringify(event)} from ${this.form.href}`);
                const output = new core_1.Content(this.form.contentType ?? core_1.ContentSerdes.DEFAULT, stream_1.Readable.from(event.data));
                next(output);
            };
            this.eventSource.onerror = function (event) {
                error?.(new Error(event.toString()));
                complete && complete();
                reject(event.toString());
            };
        });
    }
    close() {
        this.eventSource?.close();
    }
}
exports.SSESubscription = SSESubscription;
//# sourceMappingURL=subscription-protocols.js.map