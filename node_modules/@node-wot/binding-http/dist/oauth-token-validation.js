"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointValidator = exports.Validator = void 0;
exports.default = default_1;
const node_fetch_1 = __importStar(require("node-fetch"));
const credential_1 = require("./credential");
const http = __importStar(require("http"));
const https_1 = require("https");
class Validator {
}
exports.Validator = Validator;
function extractTokenFromRequest(request) {
    const headerToken = request.headers.authorization;
    const url = new URL(request.url ?? "", `http://${request.headers.host}`);
    const queryToken = url.searchParams.get("access_token");
    if (headerToken != null && queryToken != null) {
        throw new Error("Invalid request: only one authentication method is allowed");
    }
    if (queryToken != null) {
        return queryToken;
    }
    const matches = headerToken?.match(/Bearer\s(\S+)/);
    if (!matches) {
        throw new Error("Invalid request: malformed authorization header");
    }
    return matches[1];
}
class EndpointValidator extends Validator {
    constructor(config) {
        super();
        this.config = config;
        const endpoint = config.endpoint;
        const allowSelfSigned = config?.allowSelfSigned ?? false;
        this.agent = endpoint.startsWith("https")
            ? new https_1.Agent({
                rejectUnauthorized: !allowSelfSigned,
            })
            : new http.Agent();
    }
    async validate(tokenRequest, scopes, clients) {
        const token = extractTokenFromRequest(tokenRequest);
        const request = new node_fetch_1.Request(this.config.endpoint, {
            method: "POST",
            body: `token=${token}`,
            headers: {
                "content-type": "application/x-www-form-urlencoded",
            },
            agent: this.agent,
        });
        if (this.config.credentials) {
            await new credential_1.BasicCredential(this.config.credentials).sign(request);
        }
        const response = await (0, node_fetch_1.default)(request);
        if (response.status !== 200) {
            throw new Error("Introspection endpoint error: " + response.statusText);
        }
        const contentType = response.headers.get("content-type")?.split(";")[0];
        if (contentType !== "application/json") {
            throw new Error("Introspection response is not a json file. Content-Type: " + response.headers.get("content-type"));
        }
        const validationResult = (await response.json());
        if (validationResult.active === undefined) {
            throw new Error("Malformed token introspection response: active is undefined");
        }
        if (!validationResult.active) {
            return false;
        }
        if (scopes.length === 0) {
            return true;
        }
        if (validationResult.scope == null) {
            return false;
        }
        const tokenScopes = validationResult.scope.split(" ");
        const validScope = tokenScopes.some((tokenScope) => {
            return scopes.some((thingScope) => tokenScope === thingScope);
        });
        if (!validScope)
            return false;
        if (!validationResult.client_id?.match(clients)) {
            return false;
        }
        return true;
    }
}
exports.EndpointValidator = EndpointValidator;
function default_1(method) {
    if (!method || !method?.name) {
        throw new Error("Undefined oauth token validation method");
    }
    switch (method.name) {
        case "introspection_endpoint":
            return new EndpointValidator(method);
        default:
            throw new Error("Unsupported oauth token validation method " + method.name);
    }
}
//# sourceMappingURL=oauth-token-validation.js.map