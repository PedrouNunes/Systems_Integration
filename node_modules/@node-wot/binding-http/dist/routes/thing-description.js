"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = thingDescriptionRoute;
const core_1 = require("@node-wot/core");
const acceptLanguageParser = __importStar(require("accept-language-parser"));
const { debug } = (0, core_1.createLoggers)("binding-http", "routes", "thing-description");
function resetMultiLangInteraction(interactions, prefLang) {
    if (interactions != null) {
        for (const interaction of Object.values(interactions)) {
            delete interaction.title;
            delete interaction.description;
            for (const [titleLang, titleValue] of Object.entries(interaction.titles ?? {})) {
                if (titleLang.startsWith(prefLang)) {
                    interaction.title = titleValue;
                    break;
                }
            }
            for (const [descLang, descriptionValue] of Object.entries(interaction.descriptions ?? {})) {
                if (descLang.startsWith(prefLang)) {
                    interaction.description = descriptionValue;
                    break;
                }
            }
            delete interaction.titles;
            delete interaction.descriptions;
        }
    }
}
function resetMultiLangThing(thing, prefLang) {
    (0, core_1.setContextLanguage)(thing, prefLang, true);
    if (thing.titles) {
        for (const titleLang in thing.titles) {
            if (titleLang.startsWith(prefLang)) {
                thing.title = thing.titles[titleLang];
            }
        }
    }
    if (thing.descriptions) {
        for (const titleLang in thing.descriptions) {
            if (titleLang.startsWith(prefLang)) {
                thing.description = thing.descriptions[titleLang];
            }
        }
    }
    delete thing.titles;
    delete thing.descriptions;
    resetMultiLangInteraction(thing.properties, prefLang);
    resetMultiLangInteraction(thing.actions, prefLang);
    resetMultiLangInteraction(thing.events, prefLang);
}
function negotiateLanguage(td, thing, req) {
    const acceptLanguage = req.headers["accept-language"];
    const noPreference = acceptLanguage == null || acceptLanguage === "*";
    if (noPreference) {
        return;
    }
    if (td.titles != null) {
        const supportedLanguages = Object.keys(td.titles);
        const prefLang = acceptLanguageParser.pick(supportedLanguages, acceptLanguage, {
            loose: true,
        });
        if (prefLang != null) {
            debug(`TD language negotiation through the Accept-Language header field of HTTP leads to "${prefLang}"`);
            resetMultiLangThing(td, prefLang);
        }
    }
}
async function thingDescriptionRoute(req, res, _params) {
    if (_params.thing === undefined) {
        res.writeHead(400);
        res.end();
        return;
    }
    const thing = this.getThings().get(_params.thing);
    if (thing == null) {
        res.writeHead(404);
        res.end();
        return;
    }
    const td = thing.getThingDescription();
    const contentSerdes = core_1.ContentSerdes.get();
    const acceptValues = req.headers.accept?.split(",").map((acceptValue) => acceptValue.split(";")[0]) ?? [
        core_1.ContentSerdes.TD,
    ];
    const filteredAcceptValues = acceptValues
        .map((acceptValue) => {
        if (acceptValue === "*/*") {
            return core_1.ContentSerdes.TD;
        }
        return acceptValue;
    })
        .filter((acceptValue) => contentSerdes.isSupported(acceptValue))
        .sort((a, b) => {
        const aWeight = ["text/html", "application/json", "application/td+json"].findIndex((value) => value === a);
        const bWeight = ["text/html", "application/json", "application/td+json"].findIndex((value) => value === b);
        return bWeight - aWeight;
    });
    if (filteredAcceptValues.length > 0) {
        const contentType = filteredAcceptValues[0];
        const content = contentSerdes.valueToContent(td, undefined, contentType);
        const payload = await content.toBuffer();
        negotiateLanguage(td, thing, req);
        res.setHeader("Access-Control-Allow-Origin", "*");
        res.setHeader("Content-Type", contentType);
        res.writeHead(200);
        debug(`Sending HTTP response for TD with Content-Type ${contentType}.`);
        res.end(payload);
        return;
    }
    debug(`Request contained an accept header with the values ${acceptValues}, none of which are supported.`);
    res.writeHead(406);
    res.end(`Accept header contained no Content-Types supported by this resource. (Was ${acceptValues})`);
}
//# sourceMappingURL=thing-description.js.map