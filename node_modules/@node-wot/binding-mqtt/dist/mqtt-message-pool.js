"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@node-wot/core");
const mqtt = __importStar(require("mqtt"));
const { debug, warn } = (0, core_1.createLoggers)("binding-mqtt", "mqtt-message-pool");
class MQTTMessagePool {
    constructor() {
        this.subscribers = new Map();
        this.errors = new Map();
    }
    async connect(brokerURI, config) {
        if (this.client === undefined) {
            this.client = await mqtt.connectAsync(brokerURI, config);
            this.client.on("message", (receivedTopic, payload) => {
                debug(`Received MQTT message from ${brokerURI} (topic: ${receivedTopic}, data length: ${payload.length})`);
                this.subscribers.get(receivedTopic)?.(receivedTopic, payload);
            });
            this.client.on("error", (error) => {
                warn(`MQTT client error: ${error.message}`);
                this.errors.forEach((errorCallback) => {
                    errorCallback(error);
                });
            });
        }
    }
    async subscribe(filter, callback, error) {
        if (this.client == null) {
            throw new Error("MQTT client is not connected");
        }
        const filters = Array.isArray(filter) ? filter : [filter];
        filters.forEach((f) => {
            if (this.subscribers.has(f)) {
                warn(`Already subscribed to ${f}; we are not supporting multiple subscribers to the same topic`);
                warn(`The subscription will be ignored`);
                return;
            }
            this.subscribers.set(f, callback);
            this.errors.set(f, error);
        });
        await this.client.subscribeAsync(filters);
    }
    async unsubscribe(filter) {
        if (this.client == null) {
            throw new Error("MQTT client is not connected");
        }
        const filters = Array.isArray(filter) ? filter : [filter];
        filters.forEach((f) => {
            this.subscribers.delete(f);
            this.errors.delete(f);
        });
        await this.client.unsubscribeAsync(filters);
    }
    async publish(topic, message, options) {
        if (this.client == null) {
            throw new Error("MQTT client is not connected");
        }
        debug(`Publishing MQTT message to ${topic} (data length: ${message.length})`);
        await this.client.publishAsync(topic, message, options);
    }
    async end() {
        for (const filter of this.subscribers.keys()) {
            this.unsubscribe(filter);
        }
        return this.client?.endAsync();
    }
}
exports.default = MQTTMessagePool;
//# sourceMappingURL=mqtt-message-pool.js.map