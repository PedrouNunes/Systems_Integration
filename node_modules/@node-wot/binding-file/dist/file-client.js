"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@node-wot/core");
const fs_1 = require("fs");
const node_url_1 = require("node:url");
const { debug } = (0, core_1.createLoggers)("binding-file", "file-client");
class FileClient {
    constructor() {
        this.setSecurity = (metadata) => false;
    }
    toString() {
        return "[FileClient]";
    }
    async readFromFile(uri, contentType) {
        const filePath = (0, node_url_1.fileURLToPath)(uri);
        debug(`Reading file of Content-Type ${contentType} from path ${filePath}.`);
        const fileHandle = await fs_1.promises.open(filePath);
        const body = fileHandle.createReadStream();
        return new core_1.Content(contentType, body);
    }
    async readResource(form) {
        const formContentType = form.contentType;
        if (formContentType == null) {
            debug(`Found no Content-Type for Form, defaulting to ${core_1.ContentSerdes.DEFAULT}`);
        }
        const contentType = formContentType ?? core_1.ContentSerdes.DEFAULT;
        return this.readFromFile(form.href, contentType);
    }
    async writeResource(form, content) {
        const filePath = (0, node_url_1.fileURLToPath)(form.href);
        await fs_1.promises.writeFile(filePath, content.body);
    }
    async invokeResource(form, content) {
        throw new Error("FileClient does not implement invoke");
    }
    async unlinkResource(form) {
        throw new Error("FileClient does not implement unlink");
    }
    async requestThingDescription(uri) {
        return this.readFromFile(uri, "application/td+json");
    }
    async subscribeResource(form, next, error, complete) {
        throw new Error("FileClient does not implement subscribe");
    }
    async start() {
    }
    async stop() {
    }
}
exports.default = FileClient;
//# sourceMappingURL=file-client.js.map